###Persistence
Persistence cnas::TestPipe
{
  doc: 'test doc';
  trigger: Manual;
  service: cnas::TestService;
  persister: Batch
  {
    sink: Relational
    {
      connection: cnas::SnowflakeConnection;
    }
    ingestMode: UnitemporalSnapshot
    {
      transactionMilestoning: BatchId
      {
        batchIdInName: 'IN_Z';
        batchIdOutName: 'OUT_Z';
      }
    }
    targetShape: Flat
    {
      modelClass: cnas::Person;
      targetName: 'snowflakeSink';
      deduplicationStrategy: None;
    }
  }
  notifier:
  {
    notifyees:
    [
      PagerDuty
      {
        url: 'bugsbunny@looney.tunes';
      }
    ]
  }
}


###Service
Service cnas::TestService
{
  pattern: '/url/myUrl/';
  owners:
  [
    'ownerName',
    'ownerName2'
  ];
  documentation: 'this is just for context';
  autoActivateUpdates: true;
  execution: Single
  {
    query: |cnas::Person.all()->graphFetch(#{cnas::Person{name,age}}#)->serialize(#{cnas::Person{name,age}}#);
    mapping: cnas::Mapping;
    runtime: cnas::SnowflakeRuntime;
  }
  test: Single
  {
    data: 'test';
    asserts:
    [
    ];
  }
}


###Relational
Database cnas::SnowflakeStore
(
  Schema SAMPLE_SCHEMA
  (
    Table DEMO_TABLE
    (
      nameindb VARCHAR(100) PRIMARY KEY,
      ageindb BIGINT
    )
  )
)


###ExternalFormat
Binding cnas::TestBinding
{
  contentType: 'application/json';
  modelIncludes: [
    cnas::Person
  ];
}


###FileGeneration
AwsPersistence cnas::AwsPersistenceGeneration
{
  scopeElements: [cnas];
}


###GenerationSpecification
GenerationSpecification cnas::MyGenerationSpecification
{
  fileGenerations: [
    cnas::AwsPersistenceGeneration
  ];
}

###Pure
Class cnas::Person
{
  name: String[1];
  age: Integer[1];
}


###Mapping
Mapping cnas::Mapping
(
  cnas::Person: Relational
  {
    ~primaryKey
    (
      [cnas::SnowflakeStore]SAMPLE_SCHEMA.DEMO_TABLE.nameindb
    )
    ~mainTable [cnas::SnowflakeStore]SAMPLE_SCHEMA.DEMO_TABLE
    name: [cnas::SnowflakeStore]SAMPLE_SCHEMA.DEMO_TABLE.nameindb,
    age: [cnas::SnowflakeStore]SAMPLE_SCHEMA.DEMO_TABLE.ageindb
  }
)


###Connection
RelationalDatabaseConnection cnas::SnowflakeConnection
{
  store: cnas::SnowflakeStore;
  type: Snowflake;
  specification: Snowflake
  {
    name: 'DATABASENAME';
    account: 'sfBLAHeast1d01';
    warehouse: 'DEV_WH_SMALL';
    region: 'us-east-1';
    organization: 'aws or empty';
    role: 'DEV_RO_ROLE';
  };
  auth: SnowflakePublic
  {
    publicUserName: 'DEV_USER_RO';
    privateKeyVaultReference: 'privateKeyRef';
    passPhraseVaultReference: 'passPhraseRef';
  };
}


###Runtime
Runtime cnas::SnowflakeRuntime
{
  mappings:
  [
    cnas::Mapping
  ];
  connections:
  [
    cnas::SnowflakeStore:
    [
      connection1: cnas::SnowflakeConnection
    ]
  ];
}

